// Code generated by SQLBoiler 4.4.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testRelMessageFiles(t *testing.T) {
	t.Parallel()

	query := RelMessageFiles()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testRelMessageFilesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RelMessageFile{}
	if err = randomize.Struct(seed, o, relMessageFileDBTypes, true, relMessageFileColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RelMessageFile struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := RelMessageFiles().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testRelMessageFilesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RelMessageFile{}
	if err = randomize.Struct(seed, o, relMessageFileDBTypes, true, relMessageFileColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RelMessageFile struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := RelMessageFiles().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := RelMessageFiles().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testRelMessageFilesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RelMessageFile{}
	if err = randomize.Struct(seed, o, relMessageFileDBTypes, true, relMessageFileColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RelMessageFile struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := RelMessageFileSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := RelMessageFiles().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testRelMessageFilesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RelMessageFile{}
	if err = randomize.Struct(seed, o, relMessageFileDBTypes, true, relMessageFileColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RelMessageFile struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := RelMessageFileExists(ctx, tx, o.FileID, o.MessageTimestamp)
	if err != nil {
		t.Errorf("Unable to check if RelMessageFile exists: %s", err)
	}
	if !e {
		t.Errorf("Expected RelMessageFileExists to return true, but got false.")
	}
}

func testRelMessageFilesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RelMessageFile{}
	if err = randomize.Struct(seed, o, relMessageFileDBTypes, true, relMessageFileColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RelMessageFile struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	relMessageFileFound, err := FindRelMessageFile(ctx, tx, o.FileID, o.MessageTimestamp)
	if err != nil {
		t.Error(err)
	}

	if relMessageFileFound == nil {
		t.Error("want a record, got nil")
	}
}

func testRelMessageFilesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RelMessageFile{}
	if err = randomize.Struct(seed, o, relMessageFileDBTypes, true, relMessageFileColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RelMessageFile struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = RelMessageFiles().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testRelMessageFilesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RelMessageFile{}
	if err = randomize.Struct(seed, o, relMessageFileDBTypes, true, relMessageFileColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RelMessageFile struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := RelMessageFiles().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testRelMessageFilesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	relMessageFileOne := &RelMessageFile{}
	relMessageFileTwo := &RelMessageFile{}
	if err = randomize.Struct(seed, relMessageFileOne, relMessageFileDBTypes, false, relMessageFileColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RelMessageFile struct: %s", err)
	}
	if err = randomize.Struct(seed, relMessageFileTwo, relMessageFileDBTypes, false, relMessageFileColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RelMessageFile struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = relMessageFileOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = relMessageFileTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := RelMessageFiles().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testRelMessageFilesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	relMessageFileOne := &RelMessageFile{}
	relMessageFileTwo := &RelMessageFile{}
	if err = randomize.Struct(seed, relMessageFileOne, relMessageFileDBTypes, false, relMessageFileColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RelMessageFile struct: %s", err)
	}
	if err = randomize.Struct(seed, relMessageFileTwo, relMessageFileDBTypes, false, relMessageFileColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RelMessageFile struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = relMessageFileOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = relMessageFileTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := RelMessageFiles().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func relMessageFileBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *RelMessageFile) error {
	*o = RelMessageFile{}
	return nil
}

func relMessageFileAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *RelMessageFile) error {
	*o = RelMessageFile{}
	return nil
}

func relMessageFileAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *RelMessageFile) error {
	*o = RelMessageFile{}
	return nil
}

func relMessageFileBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *RelMessageFile) error {
	*o = RelMessageFile{}
	return nil
}

func relMessageFileAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *RelMessageFile) error {
	*o = RelMessageFile{}
	return nil
}

func relMessageFileBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *RelMessageFile) error {
	*o = RelMessageFile{}
	return nil
}

func relMessageFileAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *RelMessageFile) error {
	*o = RelMessageFile{}
	return nil
}

func relMessageFileBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *RelMessageFile) error {
	*o = RelMessageFile{}
	return nil
}

func relMessageFileAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *RelMessageFile) error {
	*o = RelMessageFile{}
	return nil
}

func testRelMessageFilesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &RelMessageFile{}
	o := &RelMessageFile{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, relMessageFileDBTypes, false); err != nil {
		t.Errorf("Unable to randomize RelMessageFile object: %s", err)
	}

	AddRelMessageFileHook(boil.BeforeInsertHook, relMessageFileBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	relMessageFileBeforeInsertHooks = []RelMessageFileHook{}

	AddRelMessageFileHook(boil.AfterInsertHook, relMessageFileAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	relMessageFileAfterInsertHooks = []RelMessageFileHook{}

	AddRelMessageFileHook(boil.AfterSelectHook, relMessageFileAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	relMessageFileAfterSelectHooks = []RelMessageFileHook{}

	AddRelMessageFileHook(boil.BeforeUpdateHook, relMessageFileBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	relMessageFileBeforeUpdateHooks = []RelMessageFileHook{}

	AddRelMessageFileHook(boil.AfterUpdateHook, relMessageFileAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	relMessageFileAfterUpdateHooks = []RelMessageFileHook{}

	AddRelMessageFileHook(boil.BeforeDeleteHook, relMessageFileBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	relMessageFileBeforeDeleteHooks = []RelMessageFileHook{}

	AddRelMessageFileHook(boil.AfterDeleteHook, relMessageFileAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	relMessageFileAfterDeleteHooks = []RelMessageFileHook{}

	AddRelMessageFileHook(boil.BeforeUpsertHook, relMessageFileBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	relMessageFileBeforeUpsertHooks = []RelMessageFileHook{}

	AddRelMessageFileHook(boil.AfterUpsertHook, relMessageFileAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	relMessageFileAfterUpsertHooks = []RelMessageFileHook{}
}

func testRelMessageFilesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RelMessageFile{}
	if err = randomize.Struct(seed, o, relMessageFileDBTypes, true, relMessageFileColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RelMessageFile struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := RelMessageFiles().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testRelMessageFilesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RelMessageFile{}
	if err = randomize.Struct(seed, o, relMessageFileDBTypes, true); err != nil {
		t.Errorf("Unable to randomize RelMessageFile struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(relMessageFileColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := RelMessageFiles().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testRelMessageFilesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RelMessageFile{}
	if err = randomize.Struct(seed, o, relMessageFileDBTypes, true, relMessageFileColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RelMessageFile struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testRelMessageFilesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RelMessageFile{}
	if err = randomize.Struct(seed, o, relMessageFileDBTypes, true, relMessageFileColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RelMessageFile struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := RelMessageFileSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testRelMessageFilesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RelMessageFile{}
	if err = randomize.Struct(seed, o, relMessageFileDBTypes, true, relMessageFileColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RelMessageFile struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := RelMessageFiles().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	relMessageFileDBTypes = map[string]string{`FileID`: `TEXT`, `MessageTimestamp`: `TEXT`}
	_                     = bytes.MinRead
)

func testRelMessageFilesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(relMessageFilePrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(relMessageFileAllColumns) == len(relMessageFilePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &RelMessageFile{}
	if err = randomize.Struct(seed, o, relMessageFileDBTypes, true, relMessageFileColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RelMessageFile struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := RelMessageFiles().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, relMessageFileDBTypes, true, relMessageFilePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize RelMessageFile struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testRelMessageFilesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(relMessageFileAllColumns) == len(relMessageFilePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &RelMessageFile{}
	if err = randomize.Struct(seed, o, relMessageFileDBTypes, true, relMessageFileColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RelMessageFile struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := RelMessageFiles().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, relMessageFileDBTypes, true, relMessageFilePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize RelMessageFile struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(relMessageFileAllColumns, relMessageFilePrimaryKeyColumns) {
		fields = relMessageFileAllColumns
	} else {
		fields = strmangle.SetComplement(
			relMessageFileAllColumns,
			relMessageFilePrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := RelMessageFileSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}
