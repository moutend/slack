// Code generated by SQLBoiler 4.4.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// RelMessageFile is an object representing the database table.
type RelMessageFile struct {
	FileID           string `boil:"file_id" json:"file_id" toml:"file_id" yaml:"file_id"`
	MessageTimestamp string `boil:"message_timestamp" json:"message_timestamp" toml:"message_timestamp" yaml:"message_timestamp"`

	R *relMessageFileR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L relMessageFileL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var RelMessageFileColumns = struct {
	FileID           string
	MessageTimestamp string
}{
	FileID:           "file_id",
	MessageTimestamp: "message_timestamp",
}

// Generated where

var RelMessageFileWhere = struct {
	FileID           whereHelperstring
	MessageTimestamp whereHelperstring
}{
	FileID:           whereHelperstring{field: "\"rel_message_file\".\"file_id\""},
	MessageTimestamp: whereHelperstring{field: "\"rel_message_file\".\"message_timestamp\""},
}

// RelMessageFileRels is where relationship names are stored.
var RelMessageFileRels = struct {
}{}

// relMessageFileR is where relationships are stored.
type relMessageFileR struct {
}

// NewStruct creates a new relationship struct
func (*relMessageFileR) NewStruct() *relMessageFileR {
	return &relMessageFileR{}
}

// relMessageFileL is where Load methods for each relationship are stored.
type relMessageFileL struct{}

var (
	relMessageFileAllColumns            = []string{"file_id", "message_timestamp"}
	relMessageFileColumnsWithoutDefault = []string{"file_id", "message_timestamp"}
	relMessageFileColumnsWithDefault    = []string{}
	relMessageFilePrimaryKeyColumns     = []string{"file_id", "message_timestamp"}
)

type (
	// RelMessageFileSlice is an alias for a slice of pointers to RelMessageFile.
	// This should generally be used opposed to []RelMessageFile.
	RelMessageFileSlice []*RelMessageFile
	// RelMessageFileHook is the signature for custom RelMessageFile hook methods
	RelMessageFileHook func(context.Context, boil.ContextExecutor, *RelMessageFile) error

	relMessageFileQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	relMessageFileType                 = reflect.TypeOf(&RelMessageFile{})
	relMessageFileMapping              = queries.MakeStructMapping(relMessageFileType)
	relMessageFilePrimaryKeyMapping, _ = queries.BindMapping(relMessageFileType, relMessageFileMapping, relMessageFilePrimaryKeyColumns)
	relMessageFileInsertCacheMut       sync.RWMutex
	relMessageFileInsertCache          = make(map[string]insertCache)
	relMessageFileUpdateCacheMut       sync.RWMutex
	relMessageFileUpdateCache          = make(map[string]updateCache)
	relMessageFileUpsertCacheMut       sync.RWMutex
	relMessageFileUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var relMessageFileBeforeInsertHooks []RelMessageFileHook
var relMessageFileBeforeUpdateHooks []RelMessageFileHook
var relMessageFileBeforeDeleteHooks []RelMessageFileHook
var relMessageFileBeforeUpsertHooks []RelMessageFileHook

var relMessageFileAfterInsertHooks []RelMessageFileHook
var relMessageFileAfterSelectHooks []RelMessageFileHook
var relMessageFileAfterUpdateHooks []RelMessageFileHook
var relMessageFileAfterDeleteHooks []RelMessageFileHook
var relMessageFileAfterUpsertHooks []RelMessageFileHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *RelMessageFile) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range relMessageFileBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *RelMessageFile) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range relMessageFileBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *RelMessageFile) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range relMessageFileBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *RelMessageFile) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range relMessageFileBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *RelMessageFile) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range relMessageFileAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *RelMessageFile) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range relMessageFileAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *RelMessageFile) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range relMessageFileAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *RelMessageFile) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range relMessageFileAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *RelMessageFile) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range relMessageFileAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddRelMessageFileHook registers your hook function for all future operations.
func AddRelMessageFileHook(hookPoint boil.HookPoint, relMessageFileHook RelMessageFileHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		relMessageFileBeforeInsertHooks = append(relMessageFileBeforeInsertHooks, relMessageFileHook)
	case boil.BeforeUpdateHook:
		relMessageFileBeforeUpdateHooks = append(relMessageFileBeforeUpdateHooks, relMessageFileHook)
	case boil.BeforeDeleteHook:
		relMessageFileBeforeDeleteHooks = append(relMessageFileBeforeDeleteHooks, relMessageFileHook)
	case boil.BeforeUpsertHook:
		relMessageFileBeforeUpsertHooks = append(relMessageFileBeforeUpsertHooks, relMessageFileHook)
	case boil.AfterInsertHook:
		relMessageFileAfterInsertHooks = append(relMessageFileAfterInsertHooks, relMessageFileHook)
	case boil.AfterSelectHook:
		relMessageFileAfterSelectHooks = append(relMessageFileAfterSelectHooks, relMessageFileHook)
	case boil.AfterUpdateHook:
		relMessageFileAfterUpdateHooks = append(relMessageFileAfterUpdateHooks, relMessageFileHook)
	case boil.AfterDeleteHook:
		relMessageFileAfterDeleteHooks = append(relMessageFileAfterDeleteHooks, relMessageFileHook)
	case boil.AfterUpsertHook:
		relMessageFileAfterUpsertHooks = append(relMessageFileAfterUpsertHooks, relMessageFileHook)
	}
}

// One returns a single relMessageFile record from the query.
func (q relMessageFileQuery) One(ctx context.Context, exec boil.ContextExecutor) (*RelMessageFile, error) {
	o := &RelMessageFile{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for rel_message_file")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all RelMessageFile records from the query.
func (q relMessageFileQuery) All(ctx context.Context, exec boil.ContextExecutor) (RelMessageFileSlice, error) {
	var o []*RelMessageFile

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to RelMessageFile slice")
	}

	if len(relMessageFileAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all RelMessageFile records in the query.
func (q relMessageFileQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count rel_message_file rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q relMessageFileQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if rel_message_file exists")
	}

	return count > 0, nil
}

// RelMessageFiles retrieves all the records using an executor.
func RelMessageFiles(mods ...qm.QueryMod) relMessageFileQuery {
	mods = append(mods, qm.From("\"rel_message_file\""))
	return relMessageFileQuery{NewQuery(mods...)}
}

// FindRelMessageFile retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindRelMessageFile(ctx context.Context, exec boil.ContextExecutor, fileID string, messageTimestamp string, selectCols ...string) (*RelMessageFile, error) {
	relMessageFileObj := &RelMessageFile{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"rel_message_file\" where \"file_id\"=? AND \"message_timestamp\"=?", sel,
	)

	q := queries.Raw(query, fileID, messageTimestamp)

	err := q.Bind(ctx, exec, relMessageFileObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from rel_message_file")
	}

	return relMessageFileObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *RelMessageFile) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no rel_message_file provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(relMessageFileColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	relMessageFileInsertCacheMut.RLock()
	cache, cached := relMessageFileInsertCache[key]
	relMessageFileInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			relMessageFileAllColumns,
			relMessageFileColumnsWithDefault,
			relMessageFileColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(relMessageFileType, relMessageFileMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(relMessageFileType, relMessageFileMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"rel_message_file\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"rel_message_file\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT \"%s\" FROM \"rel_message_file\" WHERE %s", strings.Join(returnColumns, "\",\""), strmangle.WhereClause("\"", "\"", 0, relMessageFilePrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into rel_message_file")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.FileID,
		o.MessageTimestamp,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for rel_message_file")
	}

CacheNoHooks:
	if !cached {
		relMessageFileInsertCacheMut.Lock()
		relMessageFileInsertCache[key] = cache
		relMessageFileInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the RelMessageFile.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *RelMessageFile) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	relMessageFileUpdateCacheMut.RLock()
	cache, cached := relMessageFileUpdateCache[key]
	relMessageFileUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			relMessageFileAllColumns,
			relMessageFilePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update rel_message_file, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"rel_message_file\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 0, wl),
			strmangle.WhereClause("\"", "\"", 0, relMessageFilePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(relMessageFileType, relMessageFileMapping, append(wl, relMessageFilePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update rel_message_file row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for rel_message_file")
	}

	if !cached {
		relMessageFileUpdateCacheMut.Lock()
		relMessageFileUpdateCache[key] = cache
		relMessageFileUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q relMessageFileQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for rel_message_file")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for rel_message_file")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o RelMessageFileSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), relMessageFilePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"rel_message_file\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, relMessageFilePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in relMessageFile slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all relMessageFile")
	}
	return rowsAff, nil
}

// Delete deletes a single RelMessageFile record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *RelMessageFile) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no RelMessageFile provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), relMessageFilePrimaryKeyMapping)
	sql := "DELETE FROM \"rel_message_file\" WHERE \"file_id\"=? AND \"message_timestamp\"=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from rel_message_file")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for rel_message_file")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q relMessageFileQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no relMessageFileQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from rel_message_file")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for rel_message_file")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o RelMessageFileSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(relMessageFileBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), relMessageFilePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"rel_message_file\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, relMessageFilePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from relMessageFile slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for rel_message_file")
	}

	if len(relMessageFileAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *RelMessageFile) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindRelMessageFile(ctx, exec, o.FileID, o.MessageTimestamp)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *RelMessageFileSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := RelMessageFileSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), relMessageFilePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"rel_message_file\".* FROM \"rel_message_file\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, relMessageFilePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in RelMessageFileSlice")
	}

	*o = slice

	return nil
}

// RelMessageFileExists checks if the RelMessageFile row exists.
func RelMessageFileExists(ctx context.Context, exec boil.ContextExecutor, fileID string, messageTimestamp string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"rel_message_file\" where \"file_id\"=? AND \"message_timestamp\"=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, fileID, messageTimestamp)
	}
	row := exec.QueryRowContext(ctx, sql, fileID, messageTimestamp)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if rel_message_file exists")
	}

	return exists, nil
}
