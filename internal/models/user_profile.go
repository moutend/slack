// Code generated by SQLBoiler 4.4.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// UserProfile is an object representing the database table.
type UserProfile struct {
	FirstName             string    `boil:"first_name" json:"first_name" toml:"first_name" yaml:"first_name"`
	LastName              string    `boil:"last_name" json:"last_name" toml:"last_name" yaml:"last_name"`
	RealName              string    `boil:"real_name" json:"real_name" toml:"real_name" yaml:"real_name"`
	RealNameNormalized    string    `boil:"real_name_normalized" json:"real_name_normalized" toml:"real_name_normalized" yaml:"real_name_normalized"`
	DisplayName           string    `boil:"display_name" json:"display_name" toml:"display_name" yaml:"display_name"`
	DisplayNameNormalized string    `boil:"display_name_normalized" json:"display_name_normalized" toml:"display_name_normalized" yaml:"display_name_normalized"`
	Email                 string    `boil:"email" json:"email" toml:"email" yaml:"email"`
	Skype                 string    `boil:"skype" json:"skype" toml:"skype" yaml:"skype"`
	Phone                 string    `boil:"phone" json:"phone" toml:"phone" yaml:"phone"`
	Image24               string    `boil:"image24" json:"image24" toml:"image24" yaml:"image24"`
	Image32               string    `boil:"image32" json:"image32" toml:"image32" yaml:"image32"`
	Image48               string    `boil:"image48" json:"image48" toml:"image48" yaml:"image48"`
	Image72               string    `boil:"image72" json:"image72" toml:"image72" yaml:"image72"`
	Image192              string    `boil:"image192" json:"image192" toml:"image192" yaml:"image192"`
	Image512              string    `boil:"image512" json:"image512" toml:"image512" yaml:"image512"`
	ImageOriginal         string    `boil:"image_original" json:"image_original" toml:"image_original" yaml:"image_original"`
	Title                 string    `boil:"title" json:"title" toml:"title" yaml:"title"`
	BotID                 string    `boil:"bot_id" json:"bot_id" toml:"bot_id" yaml:"bot_id"`
	APIAppID              string    `boil:"api_app_id" json:"api_app_id" toml:"api_app_id" yaml:"api_app_id"`
	StatusText            string    `boil:"status_text" json:"status_text" toml:"status_text" yaml:"status_text"`
	StatusEmoji           string    `boil:"status_emoji" json:"status_emoji" toml:"status_emoji" yaml:"status_emoji"`
	StatusExpiration      int64     `boil:"status_expiration" json:"status_expiration" toml:"status_expiration" yaml:"status_expiration"`
	Team                  string    `boil:"team" json:"team" toml:"team" yaml:"team"`
	CreatedAt             time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt             time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *userProfileR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L userProfileL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var UserProfileColumns = struct {
	FirstName             string
	LastName              string
	RealName              string
	RealNameNormalized    string
	DisplayName           string
	DisplayNameNormalized string
	Email                 string
	Skype                 string
	Phone                 string
	Image24               string
	Image32               string
	Image48               string
	Image72               string
	Image192              string
	Image512              string
	ImageOriginal         string
	Title                 string
	BotID                 string
	APIAppID              string
	StatusText            string
	StatusEmoji           string
	StatusExpiration      string
	Team                  string
	CreatedAt             string
	UpdatedAt             string
}{
	FirstName:             "first_name",
	LastName:              "last_name",
	RealName:              "real_name",
	RealNameNormalized:    "real_name_normalized",
	DisplayName:           "display_name",
	DisplayNameNormalized: "display_name_normalized",
	Email:                 "email",
	Skype:                 "skype",
	Phone:                 "phone",
	Image24:               "image24",
	Image32:               "image32",
	Image48:               "image48",
	Image72:               "image72",
	Image192:              "image192",
	Image512:              "image512",
	ImageOriginal:         "image_original",
	Title:                 "title",
	BotID:                 "bot_id",
	APIAppID:              "api_app_id",
	StatusText:            "status_text",
	StatusEmoji:           "status_emoji",
	StatusExpiration:      "status_expiration",
	Team:                  "team",
	CreatedAt:             "created_at",
	UpdatedAt:             "updated_at",
}

// Generated where

var UserProfileWhere = struct {
	FirstName             whereHelperstring
	LastName              whereHelperstring
	RealName              whereHelperstring
	RealNameNormalized    whereHelperstring
	DisplayName           whereHelperstring
	DisplayNameNormalized whereHelperstring
	Email                 whereHelperstring
	Skype                 whereHelperstring
	Phone                 whereHelperstring
	Image24               whereHelperstring
	Image32               whereHelperstring
	Image48               whereHelperstring
	Image72               whereHelperstring
	Image192              whereHelperstring
	Image512              whereHelperstring
	ImageOriginal         whereHelperstring
	Title                 whereHelperstring
	BotID                 whereHelperstring
	APIAppID              whereHelperstring
	StatusText            whereHelperstring
	StatusEmoji           whereHelperstring
	StatusExpiration      whereHelperint64
	Team                  whereHelperstring
	CreatedAt             whereHelpertime_Time
	UpdatedAt             whereHelpertime_Time
}{
	FirstName:             whereHelperstring{field: "\"user_profile\".\"first_name\""},
	LastName:              whereHelperstring{field: "\"user_profile\".\"last_name\""},
	RealName:              whereHelperstring{field: "\"user_profile\".\"real_name\""},
	RealNameNormalized:    whereHelperstring{field: "\"user_profile\".\"real_name_normalized\""},
	DisplayName:           whereHelperstring{field: "\"user_profile\".\"display_name\""},
	DisplayNameNormalized: whereHelperstring{field: "\"user_profile\".\"display_name_normalized\""},
	Email:                 whereHelperstring{field: "\"user_profile\".\"email\""},
	Skype:                 whereHelperstring{field: "\"user_profile\".\"skype\""},
	Phone:                 whereHelperstring{field: "\"user_profile\".\"phone\""},
	Image24:               whereHelperstring{field: "\"user_profile\".\"image24\""},
	Image32:               whereHelperstring{field: "\"user_profile\".\"image32\""},
	Image48:               whereHelperstring{field: "\"user_profile\".\"image48\""},
	Image72:               whereHelperstring{field: "\"user_profile\".\"image72\""},
	Image192:              whereHelperstring{field: "\"user_profile\".\"image192\""},
	Image512:              whereHelperstring{field: "\"user_profile\".\"image512\""},
	ImageOriginal:         whereHelperstring{field: "\"user_profile\".\"image_original\""},
	Title:                 whereHelperstring{field: "\"user_profile\".\"title\""},
	BotID:                 whereHelperstring{field: "\"user_profile\".\"bot_id\""},
	APIAppID:              whereHelperstring{field: "\"user_profile\".\"api_app_id\""},
	StatusText:            whereHelperstring{field: "\"user_profile\".\"status_text\""},
	StatusEmoji:           whereHelperstring{field: "\"user_profile\".\"status_emoji\""},
	StatusExpiration:      whereHelperint64{field: "\"user_profile\".\"status_expiration\""},
	Team:                  whereHelperstring{field: "\"user_profile\".\"team\""},
	CreatedAt:             whereHelpertime_Time{field: "\"user_profile\".\"created_at\""},
	UpdatedAt:             whereHelpertime_Time{field: "\"user_profile\".\"updated_at\""},
}

// UserProfileRels is where relationship names are stored.
var UserProfileRels = struct {
}{}

// userProfileR is where relationships are stored.
type userProfileR struct {
}

// NewStruct creates a new relationship struct
func (*userProfileR) NewStruct() *userProfileR {
	return &userProfileR{}
}

// userProfileL is where Load methods for each relationship are stored.
type userProfileL struct{}

var (
	userProfileAllColumns            = []string{"first_name", "last_name", "real_name", "real_name_normalized", "display_name", "display_name_normalized", "email", "skype", "phone", "image24", "image32", "image48", "image72", "image192", "image512", "image_original", "title", "bot_id", "api_app_id", "status_text", "status_emoji", "status_expiration", "team", "created_at", "updated_at"}
	userProfileColumnsWithoutDefault = []string{"first_name", "last_name", "real_name", "real_name_normalized", "display_name", "display_name_normalized", "email", "skype", "phone", "image24", "image32", "image48", "image72", "image192", "image512", "image_original", "title", "bot_id", "api_app_id", "status_text", "status_emoji", "status_expiration", "team", "created_at", "updated_at"}
	userProfileColumnsWithDefault    = []string{}
	userProfilePrimaryKeyColumns     = []string{"display_name_normalized"}
)

type (
	// UserProfileSlice is an alias for a slice of pointers to UserProfile.
	// This should generally be used opposed to []UserProfile.
	UserProfileSlice []*UserProfile
	// UserProfileHook is the signature for custom UserProfile hook methods
	UserProfileHook func(context.Context, boil.ContextExecutor, *UserProfile) error

	userProfileQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	userProfileType                 = reflect.TypeOf(&UserProfile{})
	userProfileMapping              = queries.MakeStructMapping(userProfileType)
	userProfilePrimaryKeyMapping, _ = queries.BindMapping(userProfileType, userProfileMapping, userProfilePrimaryKeyColumns)
	userProfileInsertCacheMut       sync.RWMutex
	userProfileInsertCache          = make(map[string]insertCache)
	userProfileUpdateCacheMut       sync.RWMutex
	userProfileUpdateCache          = make(map[string]updateCache)
	userProfileUpsertCacheMut       sync.RWMutex
	userProfileUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var userProfileBeforeInsertHooks []UserProfileHook
var userProfileBeforeUpdateHooks []UserProfileHook
var userProfileBeforeDeleteHooks []UserProfileHook
var userProfileBeforeUpsertHooks []UserProfileHook

var userProfileAfterInsertHooks []UserProfileHook
var userProfileAfterSelectHooks []UserProfileHook
var userProfileAfterUpdateHooks []UserProfileHook
var userProfileAfterDeleteHooks []UserProfileHook
var userProfileAfterUpsertHooks []UserProfileHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *UserProfile) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userProfileBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *UserProfile) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userProfileBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *UserProfile) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userProfileBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *UserProfile) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userProfileBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *UserProfile) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userProfileAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *UserProfile) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userProfileAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *UserProfile) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userProfileAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *UserProfile) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userProfileAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *UserProfile) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userProfileAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddUserProfileHook registers your hook function for all future operations.
func AddUserProfileHook(hookPoint boil.HookPoint, userProfileHook UserProfileHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		userProfileBeforeInsertHooks = append(userProfileBeforeInsertHooks, userProfileHook)
	case boil.BeforeUpdateHook:
		userProfileBeforeUpdateHooks = append(userProfileBeforeUpdateHooks, userProfileHook)
	case boil.BeforeDeleteHook:
		userProfileBeforeDeleteHooks = append(userProfileBeforeDeleteHooks, userProfileHook)
	case boil.BeforeUpsertHook:
		userProfileBeforeUpsertHooks = append(userProfileBeforeUpsertHooks, userProfileHook)
	case boil.AfterInsertHook:
		userProfileAfterInsertHooks = append(userProfileAfterInsertHooks, userProfileHook)
	case boil.AfterSelectHook:
		userProfileAfterSelectHooks = append(userProfileAfterSelectHooks, userProfileHook)
	case boil.AfterUpdateHook:
		userProfileAfterUpdateHooks = append(userProfileAfterUpdateHooks, userProfileHook)
	case boil.AfterDeleteHook:
		userProfileAfterDeleteHooks = append(userProfileAfterDeleteHooks, userProfileHook)
	case boil.AfterUpsertHook:
		userProfileAfterUpsertHooks = append(userProfileAfterUpsertHooks, userProfileHook)
	}
}

// One returns a single userProfile record from the query.
func (q userProfileQuery) One(ctx context.Context, exec boil.ContextExecutor) (*UserProfile, error) {
	o := &UserProfile{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for user_profile")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all UserProfile records from the query.
func (q userProfileQuery) All(ctx context.Context, exec boil.ContextExecutor) (UserProfileSlice, error) {
	var o []*UserProfile

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to UserProfile slice")
	}

	if len(userProfileAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all UserProfile records in the query.
func (q userProfileQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count user_profile rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q userProfileQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if user_profile exists")
	}

	return count > 0, nil
}

// UserProfiles retrieves all the records using an executor.
func UserProfiles(mods ...qm.QueryMod) userProfileQuery {
	mods = append(mods, qm.From("\"user_profile\""))
	return userProfileQuery{NewQuery(mods...)}
}

// FindUserProfile retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindUserProfile(ctx context.Context, exec boil.ContextExecutor, displayNameNormalized string, selectCols ...string) (*UserProfile, error) {
	userProfileObj := &UserProfile{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"user_profile\" where \"display_name_normalized\"=?", sel,
	)

	q := queries.Raw(query, displayNameNormalized)

	err := q.Bind(ctx, exec, userProfileObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from user_profile")
	}

	return userProfileObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *UserProfile) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no user_profile provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(userProfileColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	userProfileInsertCacheMut.RLock()
	cache, cached := userProfileInsertCache[key]
	userProfileInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			userProfileAllColumns,
			userProfileColumnsWithDefault,
			userProfileColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(userProfileType, userProfileMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(userProfileType, userProfileMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"user_profile\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"user_profile\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT \"%s\" FROM \"user_profile\" WHERE %s", strings.Join(returnColumns, "\",\""), strmangle.WhereClause("\"", "\"", 0, userProfilePrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into user_profile")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.DisplayNameNormalized,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for user_profile")
	}

CacheNoHooks:
	if !cached {
		userProfileInsertCacheMut.Lock()
		userProfileInsertCache[key] = cache
		userProfileInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the UserProfile.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *UserProfile) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	userProfileUpdateCacheMut.RLock()
	cache, cached := userProfileUpdateCache[key]
	userProfileUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			userProfileAllColumns,
			userProfilePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update user_profile, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"user_profile\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 0, wl),
			strmangle.WhereClause("\"", "\"", 0, userProfilePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(userProfileType, userProfileMapping, append(wl, userProfilePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update user_profile row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for user_profile")
	}

	if !cached {
		userProfileUpdateCacheMut.Lock()
		userProfileUpdateCache[key] = cache
		userProfileUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q userProfileQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for user_profile")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for user_profile")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o UserProfileSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userProfilePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"user_profile\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, userProfilePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in userProfile slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all userProfile")
	}
	return rowsAff, nil
}

// Delete deletes a single UserProfile record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *UserProfile) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no UserProfile provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), userProfilePrimaryKeyMapping)
	sql := "DELETE FROM \"user_profile\" WHERE \"display_name_normalized\"=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from user_profile")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for user_profile")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q userProfileQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no userProfileQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from user_profile")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for user_profile")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o UserProfileSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(userProfileBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userProfilePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"user_profile\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, userProfilePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from userProfile slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for user_profile")
	}

	if len(userProfileAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *UserProfile) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindUserProfile(ctx, exec, o.DisplayNameNormalized)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *UserProfileSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := UserProfileSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userProfilePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"user_profile\".* FROM \"user_profile\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, userProfilePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in UserProfileSlice")
	}

	*o = slice

	return nil
}

// UserProfileExists checks if the UserProfile row exists.
func UserProfileExists(ctx context.Context, exec boil.ContextExecutor, displayNameNormalized string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"user_profile\" where \"display_name_normalized\"=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, displayNameNormalized)
	}
	row := exec.QueryRowContext(ctx, sql, displayNameNormalized)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if user_profile exists")
	}

	return exists, nil
}
